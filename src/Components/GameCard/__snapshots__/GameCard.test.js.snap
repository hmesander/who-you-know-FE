// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GAMECARD TESTS should match the snapshot before the game 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameCard />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="new-deck-button"
        onClick={[Function]}
>
        Get Deck
</button>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Get Deck",
        "className": "new-deck-button",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": "Get Deck",
      "type": "button",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="new-deck-button"
          onClick={[Function]}
>
          Get Deck
</button>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Get Deck",
          "className": "new-deck-button",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Get Deck",
        "type": "button",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`GAMECARD TESTS should match the snapshot when the game is over 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameCard
    gameOver="true"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          Results:
</h3>,
        <p>
          Correct: 
</p>,
        <p>
          Incorrect: 
</p>,
        <button
          className="get-deck-button"
          onClick={[Function]}
>
          Get Deck
</button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Results:",
        },
        "ref": null,
        "rendered": "Results:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Correct: ",
            undefined,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Correct: ",
          undefined,
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Incorrect: ",
            undefined,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Incorrect: ",
          undefined,
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Get Deck",
          "className": "get-deck-button",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Get Deck",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            Results:
</h3>,
          <p>
            Correct: 
</p>,
          <p>
            Incorrect: 
</p>,
          <button
            className="get-deck-button"
            onClick={[Function]}
>
            Get Deck
</button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Results:",
          },
          "ref": null,
          "rendered": "Results:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Correct: ",
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Correct: ",
            undefined,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Incorrect: ",
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Incorrect: ",
            undefined,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Get Deck",
            "className": "get-deck-button",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Get Deck",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`GAMECARD TESTS should match the snapshot when there is a gamedeck to play 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameCard
    gameDeck={
        Array [
            Object {
              "image_url": "google.com",
            },
          ]
    }
    getNextCard={[Function]}
    handleSubmit={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="game-card-info-container"
>
          <img
                    alt="Profile Picture"
                    className="circle-image"
                    src="google.com"
          />
          <hr
                    className="card-hr"
          />
</div>,
        <div
          className="guessfield-container"
>
          <label
                    htmlFor="user-guess"
          >
                    Name This Connection:
          </label>
          <input
                    aria-label="Please Enter Your Guess"
                    className="guess-field input-fields"
                    id="user-guess"
                    name="guess"
                    onChange={[Function]}
                    type="text"
                    value={undefined}
          />
          <button
                    className="submit-guess-button"
                    onClick={[Function]}
          >
                    Submit Guess
          </button>
</div>,
        <div
          className="feedback-container"
>
          <p />
</div>,
      ],
      "className": "game-card-component",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <img
              alt="Profile Picture"
              className="circle-image"
              src="google.com"
/>,
            <hr
              className="card-hr"
/>,
          ],
          "className": "game-card-info-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "Profile Picture",
              "className": "circle-image",
              "src": "google.com",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "card-hr",
            },
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              htmlFor="user-guess"
>
              Name This Connection:
</label>,
            <input
              aria-label="Please Enter Your Guess"
              className="guess-field input-fields"
              id="user-guess"
              name="guess"
              onChange={[Function]}
              type="text"
              value={undefined}
/>,
            <button
              className="submit-guess-button"
              onClick={[Function]}
>
              Submit Guess
</button>,
          ],
          "className": "guessfield-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Name This Connection:",
              "htmlFor": "user-guess",
            },
            "ref": null,
            "rendered": "Name This Connection:",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-label": "Please Enter Your Guess",
              "className": "guess-field input-fields",
              "id": "user-guess",
              "name": "guess",
              "onChange": [Function],
              "type": "text",
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Submit Guess",
              "className": "submit-guess-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Submit Guess",
            "type": "button",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p />,
            null,
          ],
          "className": "feedback-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "p",
          },
          null,
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="game-card-info-container"
>
            <img
                        alt="Profile Picture"
                        className="circle-image"
                        src="google.com"
            />
            <hr
                        className="card-hr"
            />
</div>,
          <div
            className="guessfield-container"
>
            <label
                        htmlFor="user-guess"
            >
                        Name This Connection:
            </label>
            <input
                        aria-label="Please Enter Your Guess"
                        className="guess-field input-fields"
                        id="user-guess"
                        name="guess"
                        onChange={[Function]}
                        type="text"
                        value={undefined}
            />
            <button
                        className="submit-guess-button"
                        onClick={[Function]}
            >
                        Submit Guess
            </button>
</div>,
          <div
            className="feedback-container"
>
            <p />
</div>,
        ],
        "className": "game-card-component",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <img
                alt="Profile Picture"
                className="circle-image"
                src="google.com"
/>,
              <hr
                className="card-hr"
/>,
            ],
            "className": "game-card-info-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "Profile Picture",
                "className": "circle-image",
                "src": "google.com",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "card-hr",
              },
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="user-guess"
>
                Name This Connection:
</label>,
              <input
                aria-label="Please Enter Your Guess"
                className="guess-field input-fields"
                id="user-guess"
                name="guess"
                onChange={[Function]}
                type="text"
                value={undefined}
/>,
              <button
                className="submit-guess-button"
                onClick={[Function]}
>
                Submit Guess
</button>,
            ],
            "className": "guessfield-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Name This Connection:",
                "htmlFor": "user-guess",
              },
              "ref": null,
              "rendered": "Name This Connection:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-label": "Please Enter Your Guess",
                "className": "guess-field input-fields",
                "id": "user-guess",
                "name": "guess",
                "onChange": [Function],
                "type": "text",
                "value": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Submit Guess",
                "className": "submit-guess-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Submit Guess",
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p />,
              null,
            ],
            "className": "feedback-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "p",
            },
            null,
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
